
Lab_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002f9c  08002f9c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f9c  08002f9c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000028  08002fcc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002fcc  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000911c  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  0002916d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f0c  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c188  00000000  00000000  0004310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008247e  00000000  00000000  0004f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000d1764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f60 	.word	0x08002f60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002f60 	.word	0x08002f60

0800014c <display7SEG_1>:
 */

#include "main.h"
#include "7_segment.h"

void display7SEG_1 (int counter){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	int digit_1 = counter/10;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4abd      	ldr	r2, [pc, #756]	; (800044c <display7SEG_1+0x300>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	60fb      	str	r3, [r7, #12]
	int digit_2 = counter%10;
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	4bb9      	ldr	r3, [pc, #740]	; (800044c <display7SEG_1+0x300>)
 8000168:	fb83 1302 	smull	r1, r3, r3, r2
 800016c:	1099      	asrs	r1, r3, #2
 800016e:	17d3      	asrs	r3, r2, #31
 8000170:	1ac9      	subs	r1, r1, r3
 8000172:	460b      	mov	r3, r1
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	440b      	add	r3, r1
 8000178:	005b      	lsls	r3, r3, #1
 800017a:	1ad3      	subs	r3, r2, r3
 800017c:	60bb      	str	r3, [r7, #8]

	if (digit_1 == 0){
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d114      	bne.n	80001ae <display7SEG_1+0x62>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	2101      	movs	r1, #1
 8000188:	48b1      	ldr	r0, [pc, #708]	; (8000450 <display7SEG_1+0x304>)
 800018a:	f001 fec6 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	2102      	movs	r1, #2
 8000192:	48af      	ldr	r0, [pc, #700]	; (8000450 <display7SEG_1+0x304>)
 8000194:	f001 fec1 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	2104      	movs	r1, #4
 800019c:	48ac      	ldr	r0, [pc, #688]	; (8000450 <display7SEG_1+0x304>)
 800019e:	f001 febc 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2108      	movs	r1, #8
 80001a6:	48aa      	ldr	r0, [pc, #680]	; (8000450 <display7SEG_1+0x304>)
 80001a8:	f001 feb7 	bl	8001f1a <HAL_GPIO_WritePin>
 80001ac:	e0d6      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 1){
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d114      	bne.n	80001de <display7SEG_1+0x92>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2101      	movs	r1, #1
 80001b8:	48a5      	ldr	r0, [pc, #660]	; (8000450 <display7SEG_1+0x304>)
 80001ba:	f001 feae 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2102      	movs	r1, #2
 80001c2:	48a3      	ldr	r0, [pc, #652]	; (8000450 <display7SEG_1+0x304>)
 80001c4:	f001 fea9 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2104      	movs	r1, #4
 80001cc:	48a0      	ldr	r0, [pc, #640]	; (8000450 <display7SEG_1+0x304>)
 80001ce:	f001 fea4 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2108      	movs	r1, #8
 80001d6:	489e      	ldr	r0, [pc, #632]	; (8000450 <display7SEG_1+0x304>)
 80001d8:	f001 fe9f 	bl	8001f1a <HAL_GPIO_WritePin>
 80001dc:	e0be      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 2){
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d114      	bne.n	800020e <display7SEG_1+0xc2>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2101      	movs	r1, #1
 80001e8:	4899      	ldr	r0, [pc, #612]	; (8000450 <display7SEG_1+0x304>)
 80001ea:	f001 fe96 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2102      	movs	r1, #2
 80001f2:	4897      	ldr	r0, [pc, #604]	; (8000450 <display7SEG_1+0x304>)
 80001f4:	f001 fe91 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2104      	movs	r1, #4
 80001fc:	4894      	ldr	r0, [pc, #592]	; (8000450 <display7SEG_1+0x304>)
 80001fe:	f001 fe8c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2108      	movs	r1, #8
 8000206:	4892      	ldr	r0, [pc, #584]	; (8000450 <display7SEG_1+0x304>)
 8000208:	f001 fe87 	bl	8001f1a <HAL_GPIO_WritePin>
 800020c:	e0a6      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 3){
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	2b03      	cmp	r3, #3
 8000212:	d114      	bne.n	800023e <display7SEG_1+0xf2>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	488d      	ldr	r0, [pc, #564]	; (8000450 <display7SEG_1+0x304>)
 800021a:	f001 fe7e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	2102      	movs	r1, #2
 8000222:	488b      	ldr	r0, [pc, #556]	; (8000450 <display7SEG_1+0x304>)
 8000224:	f001 fe79 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	4888      	ldr	r0, [pc, #544]	; (8000450 <display7SEG_1+0x304>)
 800022e:	f001 fe74 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2108      	movs	r1, #8
 8000236:	4886      	ldr	r0, [pc, #536]	; (8000450 <display7SEG_1+0x304>)
 8000238:	f001 fe6f 	bl	8001f1a <HAL_GPIO_WritePin>
 800023c:	e08e      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 4){
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2b04      	cmp	r3, #4
 8000242:	d114      	bne.n	800026e <display7SEG_1+0x122>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2101      	movs	r1, #1
 8000248:	4881      	ldr	r0, [pc, #516]	; (8000450 <display7SEG_1+0x304>)
 800024a:	f001 fe66 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2102      	movs	r1, #2
 8000252:	487f      	ldr	r0, [pc, #508]	; (8000450 <display7SEG_1+0x304>)
 8000254:	f001 fe61 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2104      	movs	r1, #4
 800025c:	487c      	ldr	r0, [pc, #496]	; (8000450 <display7SEG_1+0x304>)
 800025e:	f001 fe5c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2108      	movs	r1, #8
 8000266:	487a      	ldr	r0, [pc, #488]	; (8000450 <display7SEG_1+0x304>)
 8000268:	f001 fe57 	bl	8001f1a <HAL_GPIO_WritePin>
 800026c:	e076      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 5){
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b05      	cmp	r3, #5
 8000272:	d114      	bne.n	800029e <display7SEG_1+0x152>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2101      	movs	r1, #1
 8000278:	4875      	ldr	r0, [pc, #468]	; (8000450 <display7SEG_1+0x304>)
 800027a:	f001 fe4e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2102      	movs	r1, #2
 8000282:	4873      	ldr	r0, [pc, #460]	; (8000450 <display7SEG_1+0x304>)
 8000284:	f001 fe49 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2104      	movs	r1, #4
 800028c:	4870      	ldr	r0, [pc, #448]	; (8000450 <display7SEG_1+0x304>)
 800028e:	f001 fe44 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2108      	movs	r1, #8
 8000296:	486e      	ldr	r0, [pc, #440]	; (8000450 <display7SEG_1+0x304>)
 8000298:	f001 fe3f 	bl	8001f1a <HAL_GPIO_WritePin>
 800029c:	e05e      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 6){
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b06      	cmp	r3, #6
 80002a2:	d114      	bne.n	80002ce <display7SEG_1+0x182>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2101      	movs	r1, #1
 80002a8:	4869      	ldr	r0, [pc, #420]	; (8000450 <display7SEG_1+0x304>)
 80002aa:	f001 fe36 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2102      	movs	r1, #2
 80002b2:	4867      	ldr	r0, [pc, #412]	; (8000450 <display7SEG_1+0x304>)
 80002b4:	f001 fe31 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2104      	movs	r1, #4
 80002bc:	4864      	ldr	r0, [pc, #400]	; (8000450 <display7SEG_1+0x304>)
 80002be:	f001 fe2c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2108      	movs	r1, #8
 80002c6:	4862      	ldr	r0, [pc, #392]	; (8000450 <display7SEG_1+0x304>)
 80002c8:	f001 fe27 	bl	8001f1a <HAL_GPIO_WritePin>
 80002cc:	e046      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 7){
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	d114      	bne.n	80002fe <display7SEG_1+0x1b2>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2101      	movs	r1, #1
 80002d8:	485d      	ldr	r0, [pc, #372]	; (8000450 <display7SEG_1+0x304>)
 80002da:	f001 fe1e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2102      	movs	r1, #2
 80002e2:	485b      	ldr	r0, [pc, #364]	; (8000450 <display7SEG_1+0x304>)
 80002e4:	f001 fe19 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2104      	movs	r1, #4
 80002ec:	4858      	ldr	r0, [pc, #352]	; (8000450 <display7SEG_1+0x304>)
 80002ee:	f001 fe14 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	4856      	ldr	r0, [pc, #344]	; (8000450 <display7SEG_1+0x304>)
 80002f8:	f001 fe0f 	bl	8001f1a <HAL_GPIO_WritePin>
 80002fc:	e02e      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 8){
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2b08      	cmp	r3, #8
 8000302:	d114      	bne.n	800032e <display7SEG_1+0x1e2>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4851      	ldr	r0, [pc, #324]	; (8000450 <display7SEG_1+0x304>)
 800030a:	f001 fe06 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2102      	movs	r1, #2
 8000312:	484f      	ldr	r0, [pc, #316]	; (8000450 <display7SEG_1+0x304>)
 8000314:	f001 fe01 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2104      	movs	r1, #4
 800031c:	484c      	ldr	r0, [pc, #304]	; (8000450 <display7SEG_1+0x304>)
 800031e:	f001 fdfc 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2108      	movs	r1, #8
 8000326:	484a      	ldr	r0, [pc, #296]	; (8000450 <display7SEG_1+0x304>)
 8000328:	f001 fdf7 	bl	8001f1a <HAL_GPIO_WritePin>
 800032c:	e016      	b.n	800035c <display7SEG_1+0x210>
	}
	else if (digit_1 == 9){
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b09      	cmp	r3, #9
 8000332:	d113      	bne.n	800035c <display7SEG_1+0x210>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2101      	movs	r1, #1
 8000338:	4845      	ldr	r0, [pc, #276]	; (8000450 <display7SEG_1+0x304>)
 800033a:	f001 fdee 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2102      	movs	r1, #2
 8000342:	4843      	ldr	r0, [pc, #268]	; (8000450 <display7SEG_1+0x304>)
 8000344:	f001 fde9 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2104      	movs	r1, #4
 800034c:	4840      	ldr	r0, [pc, #256]	; (8000450 <display7SEG_1+0x304>)
 800034e:	f001 fde4 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2108      	movs	r1, #8
 8000356:	483e      	ldr	r0, [pc, #248]	; (8000450 <display7SEG_1+0x304>)
 8000358:	f001 fddf 	bl	8001f1a <HAL_GPIO_WritePin>
	}

	if (digit_2 == 0){
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d114      	bne.n	800038c <display7SEG_1+0x240>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2110      	movs	r1, #16
 8000366:	483a      	ldr	r0, [pc, #232]	; (8000450 <display7SEG_1+0x304>)
 8000368:	f001 fdd7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2120      	movs	r1, #32
 8000370:	4837      	ldr	r0, [pc, #220]	; (8000450 <display7SEG_1+0x304>)
 8000372:	f001 fdd2 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	4835      	ldr	r0, [pc, #212]	; (8000450 <display7SEG_1+0x304>)
 800037c:	f001 fdcd 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	4832      	ldr	r0, [pc, #200]	; (8000450 <display7SEG_1+0x304>)
 8000386:	f001 fdc8 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
	}
}
 800038a:	e0da      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 1){
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d114      	bne.n	80003bc <display7SEG_1+0x270>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2110      	movs	r1, #16
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <display7SEG_1+0x304>)
 8000398:	f001 fdbf 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2120      	movs	r1, #32
 80003a0:	482b      	ldr	r0, [pc, #172]	; (8000450 <display7SEG_1+0x304>)
 80003a2:	f001 fdba 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2140      	movs	r1, #64	; 0x40
 80003aa:	4829      	ldr	r0, [pc, #164]	; (8000450 <display7SEG_1+0x304>)
 80003ac:	f001 fdb5 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	4826      	ldr	r0, [pc, #152]	; (8000450 <display7SEG_1+0x304>)
 80003b6:	f001 fdb0 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80003ba:	e0c2      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 2){
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d114      	bne.n	80003ec <display7SEG_1+0x2a0>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2110      	movs	r1, #16
 80003c6:	4822      	ldr	r0, [pc, #136]	; (8000450 <display7SEG_1+0x304>)
 80003c8:	f001 fda7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	481f      	ldr	r0, [pc, #124]	; (8000450 <display7SEG_1+0x304>)
 80003d2:	f001 fda2 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	481d      	ldr	r0, [pc, #116]	; (8000450 <display7SEG_1+0x304>)
 80003dc:	f001 fd9d 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <display7SEG_1+0x304>)
 80003e6:	f001 fd98 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80003ea:	e0aa      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 3){
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d114      	bne.n	800041c <display7SEG_1+0x2d0>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2110      	movs	r1, #16
 80003f6:	4816      	ldr	r0, [pc, #88]	; (8000450 <display7SEG_1+0x304>)
 80003f8:	f001 fd8f 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <display7SEG_1+0x304>)
 8000402:	f001 fd8a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <display7SEG_1+0x304>)
 800040c:	f001 fd85 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <display7SEG_1+0x304>)
 8000416:	f001 fd80 	bl	8001f1a <HAL_GPIO_WritePin>
}
 800041a:	e092      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 4){
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d118      	bne.n	8000454 <display7SEG_1+0x308>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2110      	movs	r1, #16
 8000426:	480a      	ldr	r0, [pc, #40]	; (8000450 <display7SEG_1+0x304>)
 8000428:	f001 fd77 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2120      	movs	r1, #32
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <display7SEG_1+0x304>)
 8000432:	f001 fd72 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <display7SEG_1+0x304>)
 800043c:	f001 fd6d 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <display7SEG_1+0x304>)
 8000446:	f001 fd68 	bl	8001f1a <HAL_GPIO_WritePin>
}
 800044a:	e07a      	b.n	8000542 <display7SEG_1+0x3f6>
 800044c:	66666667 	.word	0x66666667
 8000450:	40010c00 	.word	0x40010c00
	else if (digit_2 == 5){
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d114      	bne.n	8000484 <display7SEG_1+0x338>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	483b      	ldr	r0, [pc, #236]	; (800054c <display7SEG_1+0x400>)
 8000460:	f001 fd5b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2120      	movs	r1, #32
 8000468:	4838      	ldr	r0, [pc, #224]	; (800054c <display7SEG_1+0x400>)
 800046a:	f001 fd56 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4836      	ldr	r0, [pc, #216]	; (800054c <display7SEG_1+0x400>)
 8000474:	f001 fd51 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	4833      	ldr	r0, [pc, #204]	; (800054c <display7SEG_1+0x400>)
 800047e:	f001 fd4c 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000482:	e05e      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 6){
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b06      	cmp	r3, #6
 8000488:	d114      	bne.n	80004b4 <display7SEG_1+0x368>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2110      	movs	r1, #16
 800048e:	482f      	ldr	r0, [pc, #188]	; (800054c <display7SEG_1+0x400>)
 8000490:	f001 fd43 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2120      	movs	r1, #32
 8000498:	482c      	ldr	r0, [pc, #176]	; (800054c <display7SEG_1+0x400>)
 800049a:	f001 fd3e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2140      	movs	r1, #64	; 0x40
 80004a2:	482a      	ldr	r0, [pc, #168]	; (800054c <display7SEG_1+0x400>)
 80004a4:	f001 fd39 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	4827      	ldr	r0, [pc, #156]	; (800054c <display7SEG_1+0x400>)
 80004ae:	f001 fd34 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80004b2:	e046      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 7){
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2b07      	cmp	r3, #7
 80004b8:	d114      	bne.n	80004e4 <display7SEG_1+0x398>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	4823      	ldr	r0, [pc, #140]	; (800054c <display7SEG_1+0x400>)
 80004c0:	f001 fd2b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4820      	ldr	r0, [pc, #128]	; (800054c <display7SEG_1+0x400>)
 80004ca:	f001 fd26 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2140      	movs	r1, #64	; 0x40
 80004d2:	481e      	ldr	r0, [pc, #120]	; (800054c <display7SEG_1+0x400>)
 80004d4:	f001 fd21 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	481b      	ldr	r0, [pc, #108]	; (800054c <display7SEG_1+0x400>)
 80004de:	f001 fd1c 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80004e2:	e02e      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 8){
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d114      	bne.n	8000514 <display7SEG_1+0x3c8>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2110      	movs	r1, #16
 80004ee:	4817      	ldr	r0, [pc, #92]	; (800054c <display7SEG_1+0x400>)
 80004f0:	f001 fd13 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4814      	ldr	r0, [pc, #80]	; (800054c <display7SEG_1+0x400>)
 80004fa:	f001 fd0e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <display7SEG_1+0x400>)
 8000504:	f001 fd09 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	480f      	ldr	r0, [pc, #60]	; (800054c <display7SEG_1+0x400>)
 800050e:	f001 fd04 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000512:	e016      	b.n	8000542 <display7SEG_1+0x3f6>
	else if (digit_2 == 9){
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d113      	bne.n	8000542 <display7SEG_1+0x3f6>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2110      	movs	r1, #16
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <display7SEG_1+0x400>)
 8000520:	f001 fcfb 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <display7SEG_1+0x400>)
 800052a:	f001 fcf6 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <display7SEG_1+0x400>)
 8000534:	f001 fcf1 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <display7SEG_1+0x400>)
 800053e:	f001 fcec 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010c00 	.word	0x40010c00

08000550 <display7SEG_2>:

void display7SEG_2 (int counter){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	int digit_1 = counter/10;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4abf      	ldr	r2, [pc, #764]	; (8000858 <display7SEG_2+0x308>)
 800055c:	fb82 1203 	smull	r1, r2, r2, r3
 8000560:	1092      	asrs	r2, r2, #2
 8000562:	17db      	asrs	r3, r3, #31
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	60fb      	str	r3, [r7, #12]
	int digit_2 = counter%10;
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4bbb      	ldr	r3, [pc, #748]	; (8000858 <display7SEG_2+0x308>)
 800056c:	fb83 1302 	smull	r1, r3, r3, r2
 8000570:	1099      	asrs	r1, r3, #2
 8000572:	17d3      	asrs	r3, r2, #31
 8000574:	1ac9      	subs	r1, r1, r3
 8000576:	460b      	mov	r3, r1
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	60bb      	str	r3, [r7, #8]

	if (digit_1 == 0){
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d118      	bne.n	80005ba <display7SEG_2+0x6a>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058e:	48b3      	ldr	r0, [pc, #716]	; (800085c <display7SEG_2+0x30c>)
 8000590:	f001 fcc3 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059a:	48b0      	ldr	r0, [pc, #704]	; (800085c <display7SEG_2+0x30c>)
 800059c:	f001 fcbd 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	48ad      	ldr	r0, [pc, #692]	; (800085c <display7SEG_2+0x30c>)
 80005a8:	f001 fcb7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b2:	48aa      	ldr	r0, [pc, #680]	; (800085c <display7SEG_2+0x30c>)
 80005b4:	f001 fcb1 	bl	8001f1a <HAL_GPIO_WritePin>
 80005b8:	e0fa      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 1){
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d118      	bne.n	80005f2 <display7SEG_2+0xa2>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	48a5      	ldr	r0, [pc, #660]	; (800085c <display7SEG_2+0x30c>)
 80005c8:	f001 fca7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d2:	48a2      	ldr	r0, [pc, #648]	; (800085c <display7SEG_2+0x30c>)
 80005d4:	f001 fca1 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	489f      	ldr	r0, [pc, #636]	; (800085c <display7SEG_2+0x30c>)
 80005e0:	f001 fc9b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ea:	489c      	ldr	r0, [pc, #624]	; (800085c <display7SEG_2+0x30c>)
 80005ec:	f001 fc95 	bl	8001f1a <HAL_GPIO_WritePin>
 80005f0:	e0de      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 2){
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d118      	bne.n	800062a <display7SEG_2+0xda>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	4897      	ldr	r0, [pc, #604]	; (800085c <display7SEG_2+0x30c>)
 8000600:	f001 fc8b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060a:	4894      	ldr	r0, [pc, #592]	; (800085c <display7SEG_2+0x30c>)
 800060c:	f001 fc85 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	4891      	ldr	r0, [pc, #580]	; (800085c <display7SEG_2+0x30c>)
 8000618:	f001 fc7f 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000622:	488e      	ldr	r0, [pc, #568]	; (800085c <display7SEG_2+0x30c>)
 8000624:	f001 fc79 	bl	8001f1a <HAL_GPIO_WritePin>
 8000628:	e0c2      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 3){
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d118      	bne.n	8000662 <display7SEG_2+0x112>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	4889      	ldr	r0, [pc, #548]	; (800085c <display7SEG_2+0x30c>)
 8000638:	f001 fc6f 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4886      	ldr	r0, [pc, #536]	; (800085c <display7SEG_2+0x30c>)
 8000644:	f001 fc69 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	4883      	ldr	r0, [pc, #524]	; (800085c <display7SEG_2+0x30c>)
 8000650:	f001 fc63 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <display7SEG_2+0x30c>)
 800065c:	f001 fc5d 	bl	8001f1a <HAL_GPIO_WritePin>
 8000660:	e0a6      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 4){
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2b04      	cmp	r3, #4
 8000666:	d118      	bne.n	800069a <display7SEG_2+0x14a>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	487b      	ldr	r0, [pc, #492]	; (800085c <display7SEG_2+0x30c>)
 8000670:	f001 fc53 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	4878      	ldr	r0, [pc, #480]	; (800085c <display7SEG_2+0x30c>)
 800067c:	f001 fc4d 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4875      	ldr	r0, [pc, #468]	; (800085c <display7SEG_2+0x30c>)
 8000688:	f001 fc47 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000692:	4872      	ldr	r0, [pc, #456]	; (800085c <display7SEG_2+0x30c>)
 8000694:	f001 fc41 	bl	8001f1a <HAL_GPIO_WritePin>
 8000698:	e08a      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 5){
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b05      	cmp	r3, #5
 800069e:	d118      	bne.n	80006d2 <display7SEG_2+0x182>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	486d      	ldr	r0, [pc, #436]	; (800085c <display7SEG_2+0x30c>)
 80006a8:	f001 fc37 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	486a      	ldr	r0, [pc, #424]	; (800085c <display7SEG_2+0x30c>)
 80006b4:	f001 fc31 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006be:	4867      	ldr	r0, [pc, #412]	; (800085c <display7SEG_2+0x30c>)
 80006c0:	f001 fc2b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ca:	4864      	ldr	r0, [pc, #400]	; (800085c <display7SEG_2+0x30c>)
 80006cc:	f001 fc25 	bl	8001f1a <HAL_GPIO_WritePin>
 80006d0:	e06e      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 6){
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d118      	bne.n	800070a <display7SEG_2+0x1ba>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	485f      	ldr	r0, [pc, #380]	; (800085c <display7SEG_2+0x30c>)
 80006e0:	f001 fc1b 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	485c      	ldr	r0, [pc, #368]	; (800085c <display7SEG_2+0x30c>)
 80006ec:	f001 fc15 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4859      	ldr	r0, [pc, #356]	; (800085c <display7SEG_2+0x30c>)
 80006f8:	f001 fc0f 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000702:	4856      	ldr	r0, [pc, #344]	; (800085c <display7SEG_2+0x30c>)
 8000704:	f001 fc09 	bl	8001f1a <HAL_GPIO_WritePin>
 8000708:	e052      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 7){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d118      	bne.n	8000742 <display7SEG_2+0x1f2>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000716:	4851      	ldr	r0, [pc, #324]	; (800085c <display7SEG_2+0x30c>)
 8000718:	f001 fbff 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	484e      	ldr	r0, [pc, #312]	; (800085c <display7SEG_2+0x30c>)
 8000724:	f001 fbf9 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	484b      	ldr	r0, [pc, #300]	; (800085c <display7SEG_2+0x30c>)
 8000730:	f001 fbf3 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073a:	4848      	ldr	r0, [pc, #288]	; (800085c <display7SEG_2+0x30c>)
 800073c:	f001 fbed 	bl	8001f1a <HAL_GPIO_WritePin>
 8000740:	e036      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 8){
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b08      	cmp	r3, #8
 8000746:	d118      	bne.n	800077a <display7SEG_2+0x22a>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	4843      	ldr	r0, [pc, #268]	; (800085c <display7SEG_2+0x30c>)
 8000750:	f001 fbe3 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075a:	4840      	ldr	r0, [pc, #256]	; (800085c <display7SEG_2+0x30c>)
 800075c:	f001 fbdd 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	483d      	ldr	r0, [pc, #244]	; (800085c <display7SEG_2+0x30c>)
 8000768:	f001 fbd7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000772:	483a      	ldr	r0, [pc, #232]	; (800085c <display7SEG_2+0x30c>)
 8000774:	f001 fbd1 	bl	8001f1a <HAL_GPIO_WritePin>
 8000778:	e01a      	b.n	80007b0 <display7SEG_2+0x260>
	}
	else if (digit_1 == 9){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b09      	cmp	r3, #9
 800077e:	d117      	bne.n	80007b0 <display7SEG_2+0x260>
		HAL_GPIO_WritePin(A3_GPIO_Port, A3_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4835      	ldr	r0, [pc, #212]	; (800085c <display7SEG_2+0x30c>)
 8000788:	f001 fbc7 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	4832      	ldr	r0, [pc, #200]	; (800085c <display7SEG_2+0x30c>)
 8000794:	f001 fbc1 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079e:	482f      	ldr	r0, [pc, #188]	; (800085c <display7SEG_2+0x30c>)
 80007a0:	f001 fbbb 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007aa:	482c      	ldr	r0, [pc, #176]	; (800085c <display7SEG_2+0x30c>)
 80007ac:	f001 fbb5 	bl	8001f1a <HAL_GPIO_WritePin>
	}

	if (digit_2 == 0){
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d118      	bne.n	80007e8 <display7SEG_2+0x298>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007bc:	4827      	ldr	r0, [pc, #156]	; (800085c <display7SEG_2+0x30c>)
 80007be:	f001 fbac 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <display7SEG_2+0x30c>)
 80007ca:	f001 fba6 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <display7SEG_2+0x30c>)
 80007d6:	f001 fba0 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	481e      	ldr	r0, [pc, #120]	; (800085c <display7SEG_2+0x30c>)
 80007e2:	f001 fb9a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
	}
}
 80007e6:	e0fe      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 1){
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d118      	bne.n	8000820 <display7SEG_2+0x2d0>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	4819      	ldr	r0, [pc, #100]	; (800085c <display7SEG_2+0x30c>)
 80007f6:	f001 fb90 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4816      	ldr	r0, [pc, #88]	; (800085c <display7SEG_2+0x30c>)
 8000802:	f001 fb8a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <display7SEG_2+0x30c>)
 800080e:	f001 fb84 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	4810      	ldr	r0, [pc, #64]	; (800085c <display7SEG_2+0x30c>)
 800081a:	f001 fb7e 	bl	8001f1a <HAL_GPIO_WritePin>
}
 800081e:	e0e2      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 2){
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d11c      	bne.n	8000860 <display7SEG_2+0x310>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <display7SEG_2+0x30c>)
 800082e:	f001 fb74 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <display7SEG_2+0x30c>)
 800083a:	f001 fb6e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <display7SEG_2+0x30c>)
 8000846:	f001 fb68 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <display7SEG_2+0x30c>)
 8000852:	f001 fb62 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000856:	e0c6      	b.n	80009e6 <display7SEG_2+0x496>
 8000858:	66666667 	.word	0x66666667
 800085c:	40010c00 	.word	0x40010c00
	else if (digit_2 == 3){
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d118      	bne.n	8000898 <display7SEG_2+0x348>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4860      	ldr	r0, [pc, #384]	; (80009f0 <display7SEG_2+0x4a0>)
 800086e:	f001 fb54 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	485d      	ldr	r0, [pc, #372]	; (80009f0 <display7SEG_2+0x4a0>)
 800087a:	f001 fb4e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000884:	485a      	ldr	r0, [pc, #360]	; (80009f0 <display7SEG_2+0x4a0>)
 8000886:	f001 fb48 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <display7SEG_2+0x4a0>)
 8000892:	f001 fb42 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000896:	e0a6      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 4){
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b04      	cmp	r3, #4
 800089c:	d118      	bne.n	80008d0 <display7SEG_2+0x380>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	4852      	ldr	r0, [pc, #328]	; (80009f0 <display7SEG_2+0x4a0>)
 80008a6:	f001 fb38 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	484f      	ldr	r0, [pc, #316]	; (80009f0 <display7SEG_2+0x4a0>)
 80008b2:	f001 fb32 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	484c      	ldr	r0, [pc, #304]	; (80009f0 <display7SEG_2+0x4a0>)
 80008be:	f001 fb2c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c8:	4849      	ldr	r0, [pc, #292]	; (80009f0 <display7SEG_2+0x4a0>)
 80008ca:	f001 fb26 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80008ce:	e08a      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 5){
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d118      	bne.n	8000908 <display7SEG_2+0x3b8>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <display7SEG_2+0x4a0>)
 80008de:	f001 fb1c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	4841      	ldr	r0, [pc, #260]	; (80009f0 <display7SEG_2+0x4a0>)
 80008ea:	f001 fb16 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f4:	483e      	ldr	r0, [pc, #248]	; (80009f0 <display7SEG_2+0x4a0>)
 80008f6:	f001 fb10 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <display7SEG_2+0x4a0>)
 8000902:	f001 fb0a 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000906:	e06e      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 6){
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b06      	cmp	r3, #6
 800090c:	d118      	bne.n	8000940 <display7SEG_2+0x3f0>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4836      	ldr	r0, [pc, #216]	; (80009f0 <display7SEG_2+0x4a0>)
 8000916:	f001 fb00 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	4833      	ldr	r0, [pc, #204]	; (80009f0 <display7SEG_2+0x4a0>)
 8000922:	f001 fafa 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092c:	4830      	ldr	r0, [pc, #192]	; (80009f0 <display7SEG_2+0x4a0>)
 800092e:	f001 faf4 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000938:	482d      	ldr	r0, [pc, #180]	; (80009f0 <display7SEG_2+0x4a0>)
 800093a:	f001 faee 	bl	8001f1a <HAL_GPIO_WritePin>
}
 800093e:	e052      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 7){
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d118      	bne.n	8000978 <display7SEG_2+0x428>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <display7SEG_2+0x4a0>)
 800094e:	f001 fae4 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4825      	ldr	r0, [pc, #148]	; (80009f0 <display7SEG_2+0x4a0>)
 800095a:	f001 fade 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4822      	ldr	r0, [pc, #136]	; (80009f0 <display7SEG_2+0x4a0>)
 8000966:	f001 fad8 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <display7SEG_2+0x4a0>)
 8000972:	f001 fad2 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000976:	e036      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 8){
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d118      	bne.n	80009b0 <display7SEG_2+0x460>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <display7SEG_2+0x4a0>)
 8000986:	f001 fac8 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <display7SEG_2+0x4a0>)
 8000992:	f001 fac2 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <display7SEG_2+0x4a0>)
 800099e:	f001 fabc 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <display7SEG_2+0x4a0>)
 80009aa:	f001 fab6 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80009ae:	e01a      	b.n	80009e6 <display7SEG_2+0x496>
	else if (digit_2 == 9){
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d117      	bne.n	80009e6 <display7SEG_2+0x496>
		HAL_GPIO_WritePin(A4_GPIO_Port, A4_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <display7SEG_2+0x4a0>)
 80009be:	f001 faac 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <display7SEG_2+0x4a0>)
 80009ca:	f001 faa6 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <display7SEG_2+0x4a0>)
 80009d6:	f001 faa0 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <display7SEG_2+0x4a0>)
 80009e2:	f001 fa9a 	bl	8001f1a <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <display7SEG_mode>:

void display7SEG_mode (int counter){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if (counter == 1){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d118      	bne.n	8000a34 <display7SEG_mode+0x40>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a08:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a0a:	f001 fa86 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	4833      	ldr	r0, [pc, #204]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a16:	f001 fa80 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a20:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a22:	f001 fa7a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a2e:	f001 fa74 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, SET);
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
	}
}
 8000a32:	e052      	b.n	8000ada <display7SEG_mode+0xe6>
	else if (counter == 2){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d118      	bne.n	8000a6c <display7SEG_mode+0x78>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a42:	f001 fa6a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4c:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a4e:	f001 fa64 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a5a:	f001 fa5e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a66:	f001 fa58 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000a6a:	e036      	b.n	8000ada <display7SEG_mode+0xe6>
	else if (counter == 3){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d118      	bne.n	8000aa4 <display7SEG_mode+0xb0>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a7a:	f001 fa4e 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a86:	f001 fa48 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a90:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a92:	f001 fa42 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000a9e:	f001 fa3c 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000aa2:	e01a      	b.n	8000ada <display7SEG_mode+0xe6>
	else if (counter == 4){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d117      	bne.n	8000ada <display7SEG_mode+0xe6>
		HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000ab2:	f001 fa32 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000abe:	f001 fa2c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000aca:	f001 fa26 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <display7SEG_mode+0xf0>)
 8000ad6:	f001 fa20 	bl	8001f1a <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <button_reading>:

// we define counter for automatically increasing the value after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {DURATION_FOR_AUTO_DECREASING, DURATION_FOR_AUTO_DECREASING, DURATION_FOR_AUTO_DECREASING};

void button_reading (void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e087      	b.n	8000c04 <button_reading+0x11c>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4947      	ldr	r1, [pc, #284]	; (8000c18 <button_reading+0x130>)
 8000afa:	5c89      	ldrb	r1, [r1, r2]
 8000afc:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <button_reading+0x134>)
 8000afe:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d01b      	beq.n	8000b3e <button_reading+0x56>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	dc24      	bgt.n	8000b54 <button_reading+0x6c>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <button_reading+0x2c>
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d00a      	beq.n	8000b28 <button_reading+0x40>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 8000b12:	e01f      	b.n	8000b54 <button_reading+0x6c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b14:	79fc      	ldrb	r4, [r7, #7]
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4841      	ldr	r0, [pc, #260]	; (8000c20 <button_reading+0x138>)
 8000b1a:	f001 f9e7 	bl	8001eec <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <button_reading+0x130>)
 8000b24:	551a      	strb	r2, [r3, r4]
				break;
 8000b26:	e016      	b.n	8000b56 <button_reading+0x6e>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b28:	79fc      	ldrb	r4, [r7, #7]
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	483c      	ldr	r0, [pc, #240]	; (8000c20 <button_reading+0x138>)
 8000b30:	f001 f9dc 	bl	8001eec <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <button_reading+0x130>)
 8000b3a:	551a      	strb	r2, [r3, r4]
				break;
 8000b3c:	e00b      	b.n	8000b56 <button_reading+0x6e>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b3e:	79fc      	ldrb	r4, [r7, #7]
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	4836      	ldr	r0, [pc, #216]	; (8000c20 <button_reading+0x138>)
 8000b46:	f001 f9d1 	bl	8001eec <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <button_reading+0x130>)
 8000b50:	551a      	strb	r2, [r3, r4]
				break;
 8000b52:	e000      	b.n	8000b56 <button_reading+0x6e>
				break;
 8000b54:	bf00      	nop
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <button_reading+0x130>)
 8000b5a:	5cd2      	ldrb	r2, [r2, r3]
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	492f      	ldr	r1, [pc, #188]	; (8000c1c <button_reading+0x134>)
 8000b60:	5ccb      	ldrb	r3, [r1, r3]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d14b      	bne.n	8000bfe <button_reading+0x116>
		{
			if(debounceButtonBuffer2[i] != debounceButtonBuffer3[i])
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <button_reading+0x134>)
 8000b6a:	5cd2      	ldrb	r2, [r2, r3]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	492d      	ldr	r1, [pc, #180]	; (8000c24 <button_reading+0x13c>)
 8000b70:	5ccb      	ldrb	r3, [r1, r3]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d014      	beq.n	8000ba0 <button_reading+0xb8>
			{
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4928      	ldr	r1, [pc, #160]	; (8000c1c <button_reading+0x134>)
 8000b7c:	5c89      	ldrb	r1, [r1, r2]
 8000b7e:	4a29      	ldr	r2, [pc, #164]	; (8000c24 <button_reading+0x13c>)
 8000b80:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <button_reading+0x13c>)
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d138      	bne.n	8000bfe <button_reading+0x116>
				{
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <button_reading+0x140>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <button_reading+0x144>)
 8000b98:	2164      	movs	r1, #100	; 0x64
 8000b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b9e:	e02e      	b.n	8000bfe <button_reading+0x116>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <button_reading+0x144>)
 8000ba4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	b291      	uxth	r1, r2
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <button_reading+0x144>)
 8000bae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <button_reading+0x144>)
 8000bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d11f      	bne.n	8000bfe <button_reading+0x116>
				{
					if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <button_reading+0x13c>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10c      	bne.n	8000be2 <button_reading+0xfa>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <button_reading+0x144>)
 8000bcc:	2164      	movs	r1, #100	; 0x64
 8000bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <button_reading+0x140>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i] = 1;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <button_reading+0x148>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	54d1      	strb	r1, [r2, r3]
					}

					if(debounceButtonBuffer3[i] == BUTTON_IS_RELEASED)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <button_reading+0x13c>)
 8000be6:	5cd3      	ldrb	r3, [r2, r3]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d108      	bne.n	8000bfe <button_reading+0x116>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <button_reading+0x144>)
 8000bf0:	2164      	movs	r1, #100	; 0x64
 8000bf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonPress1s[i] = 0;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <button_reading+0x148>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3301      	adds	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	f67f af74 	bls.w	8000af4 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	40010800 	.word	0x40010800
 8000c24:	2000000c 	.word	0x2000000c
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000010 	.word	0x20000010
 8000c30:	20000050 	.word	0x20000050

08000c34 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d901      	bls.n	8000c48 <is_button_pressed+0x14>
 8000c44:	2300      	movs	r3, #0
 8000c46:	e00d      	b.n	8000c64 <is_button_pressed+0x30>
	GPIO_PinState new = buttonBuffer[index];
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <is_button_pressed+0x3c>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	73fb      	strb	r3, [r7, #15]
	buttonBuffer[index] = BUTTON_IS_RELEASED;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <is_button_pressed+0x3c>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	54d1      	strb	r1, [r2, r3]
	return (new == BUTTON_IS_PRESSED);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0xff;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d901      	bls.n	8000c88 <is_button_pressed_1s+0x14>
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	e00d      	b.n	8000ca4 <is_button_pressed_1s+0x30>
	uint8_t new = flagForButtonPress1s[index];
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <is_button_pressed_1s+0x3c>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	73fb      	strb	r3, [r7, #15]
	flagForButtonPress1s[index] = 0;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <is_button_pressed_1s+0x3c>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	54d1      	strb	r1, [r2, r3]
	return (new == 1);
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000050 	.word	0x20000050

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fe2c 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f812 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 f898 	bl	8000df4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cc4:	f000 f84a 	bl	8000d5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <main+0x2c>)
 8000cca:	f001 fd85 	bl	80027d8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  runMode1();
 8000cce:	f000 f90b 	bl	8000ee8 <runMode1>
	  runMode2();
 8000cd2:	f000 fb1d 	bl	8001310 <runMode2>
	  runMode3();
 8000cd6:	f000 fbb5 	bl	8001444 <runMode3>
	  runMode4();
 8000cda:	f000 fc4d 	bl	8001578 <runMode4>
	  runMode1();
 8000cde:	e7f6      	b.n	8000cce <main+0x1a>
 8000ce0:	20000054 	.word	0x20000054

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f92c 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f92e 	bl	8001f7c <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d26:	f000 f8da 	bl	8000ede <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fb9c 	bl	8002480 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f8c6 	bl	8000ede <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3740      	adds	r7, #64	; 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d90:	2209      	movs	r2, #9
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000da2:	f001 fcc9 	bl	8002738 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 f897 	bl	8000ede <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000dbe:	f001 fe5f 	bl	8002a80 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 f889 	bl	8000ede <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM2_Init+0x94>)
 8000dda:	f002 f82b 	bl	8002e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f87b 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000054 	.word	0x20000054

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_GPIO_Init+0xbc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f64f 017e 	movw	r1, #63614	; 0xf87e
 8000e3e:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <MX_GPIO_Init+0xc0>)
 8000e40:	f001 f86b 	bl	8001f1a <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|test_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|C3_Pin
 8000e44:	2200      	movs	r2, #0
 8000e46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <MX_GPIO_Init+0xc4>)
 8000e4c:	f001 f865 	bl	8001f1a <HAL_GPIO_WritePin>
                          |C2_Pin|D2_Pin|A3_Pin|B3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin MODE_A_Pin MODE_B_Pin
                           MODE_C_Pin MODE_D_Pin test_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000e50:	f64f 037e 	movw	r3, #63614	; 0xf87e
 8000e54:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|test_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0xc0>)
 8000e6a:	f000 fec3 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000e6e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_GPIO_Init+0xc0>)
 8000e84:	f000 feb6 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin C3_Pin
                           D3_Pin A4_Pin B4_Pin C4_Pin
                           D4_Pin D1_Pin A2_Pin B2_Pin
                           C2_Pin D2_Pin A3_Pin B3_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|C3_Pin
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8c:	60bb      	str	r3, [r7, #8]
                          |D3_Pin|A4_Pin|B4_Pin|C4_Pin
                          |D4_Pin|D1_Pin|A2_Pin|B2_Pin
                          |C2_Pin|D2_Pin|A3_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2302      	movs	r3, #2
 8000e98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_GPIO_Init+0xc4>)
 8000ea2:	f000 fea7 	bl	8001bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000ece:	f7ff fe0b 	bl	8000ae8 <button_reading>
	}
	timer_run();
 8000ed2:	f000 fcb7 	bl	8001844 <timer_run>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee2:	b672      	cpsid	i
}
 8000ee4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <Error_Handler+0x8>

08000ee8 <runMode1>:
 *      Author: Admin
 */

#include "mode_1.h"

void runMode1(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	switch(status){
 8000eec:	4b89      	ldr	r3, [pc, #548]	; (8001114 <runMode1+0x22c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b0e      	cmp	r3, #14
 8000ef2:	f200 81f6 	bhi.w	80012e2 <runMode1+0x3fa>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <runMode1+0x14>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f39 	.word	0x08000f39
 8000f00:	080012e3 	.word	0x080012e3
 8000f04:	080012e3 	.word	0x080012e3
 8000f08:	080012e3 	.word	0x080012e3
 8000f0c:	080012e3 	.word	0x080012e3
 8000f10:	080012e3 	.word	0x080012e3
 8000f14:	080012e3 	.word	0x080012e3
 8000f18:	080012e3 	.word	0x080012e3
 8000f1c:	080012e3 	.word	0x080012e3
 8000f20:	080012e3 	.word	0x080012e3
 8000f24:	080012e3 	.word	0x080012e3
 8000f28:	08000f5d 	.word	0x08000f5d
 8000f2c:	08001039 	.word	0x08001039
 8000f30:	0800112d 	.word	0x0800112d
 8000f34:	08001209 	.word	0x08001209
	case INIT:
		count1 = 30;
 8000f38:	4b77      	ldr	r3, [pc, #476]	; (8001118 <runMode1+0x230>)
 8000f3a:	221e      	movs	r2, #30
 8000f3c:	601a      	str	r2, [r3, #0]
		count2 = 25;
 8000f3e:	4b77      	ldr	r3, [pc, #476]	; (800111c <runMode1+0x234>)
 8000f40:	2219      	movs	r2, #25
 8000f42:	601a      	str	r2, [r3, #0]
		status = M1_RED_GREEN;
 8000f44:	4b73      	ldr	r3, [pc, #460]	; (8001114 <runMode1+0x22c>)
 8000f46:	220b      	movs	r2, #11
 8000f48:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4e:	f000 fc2b 	bl	80017a8 <setTimer1>
		setTimer2(25000);
 8000f52:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000f56:	f000 fc41 	bl	80017dc <setTimer2>
		break;
 8000f5a:	e1cb      	b.n	80012f4 <runMode1+0x40c>
	case M1_RED_GREEN:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2102      	movs	r1, #2
 8000f60:	486f      	ldr	r0, [pc, #444]	; (8001120 <runMode1+0x238>)
 8000f62:	f000 ffda 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	486d      	ldr	r0, [pc, #436]	; (8001120 <runMode1+0x238>)
 8000f6c:	f000 ffd5 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2108      	movs	r1, #8
 8000f74:	486a      	ldr	r0, [pc, #424]	; (8001120 <runMode1+0x238>)
 8000f76:	f000 ffd0 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4868      	ldr	r0, [pc, #416]	; (8001120 <runMode1+0x238>)
 8000f80:	f000 ffcb 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2120      	movs	r1, #32
 8000f88:	4865      	ldr	r0, [pc, #404]	; (8001120 <runMode1+0x238>)
 8000f8a:	f000 ffc6 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4863      	ldr	r0, [pc, #396]	; (8001120 <runMode1+0x238>)
 8000f94:	f000 ffc1 	bl	8001f1a <HAL_GPIO_WritePin>

		display7SEG_1(count1);
 8000f98:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <runMode1+0x230>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f8d5 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <runMode1+0x234>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fad2 	bl	8000550 <display7SEG_2>
		display7SEG_mode(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff fd21 	bl	80009f4 <display7SEG_mode>


		if (timer1_flag == 1){
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <runMode1+0x23c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10d      	bne.n	8000fd6 <runMode1+0xee>
			setTimer1(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	f000 fbf3 	bl	80017a8 <setTimer1>
			count1--;
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <runMode1+0x230>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <runMode1+0x230>)
 8000fca:	6013      	str	r3, [r2, #0]
			count2--;
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <runMode1+0x234>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a52      	ldr	r2, [pc, #328]	; (800111c <runMode1+0x234>)
 8000fd4:	6013      	str	r3, [r2, #0]
		}

		if (timer2_flag == 1){
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <runMode1+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d110      	bne.n	8001000 <runMode1+0x118>
			status = M1_RED_YELLOW;
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <runMode1+0x22c>)
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	601a      	str	r2, [r3, #0]
			count1 = 5;
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <runMode1+0x230>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	601a      	str	r2, [r3, #0]
			count2 = 5;
 8000fea:	4b4c      	ldr	r3, [pc, #304]	; (800111c <runMode1+0x234>)
 8000fec:	2205      	movs	r2, #5
 8000fee:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f000 fbd8 	bl	80017a8 <setTimer1>
			setTimer2(5000);
 8000ff8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ffc:	f000 fbee 	bl	80017dc <setTimer2>
		}

		if (is_button_pressed(0)){
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fe17 	bl	8000c34 <is_button_pressed>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 816c 	beq.w	80012e6 <runMode1+0x3fe>
			status = M2;
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <runMode1+0x22c>)
 8001010:	2214      	movs	r2, #20
 8001012:	601a      	str	r2, [r3, #0]
			count1 = 20;
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <runMode1+0x230>)
 8001016:	2214      	movs	r2, #20
 8001018:	601a      	str	r2, [r3, #0]
			count2 = 0;
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <runMode1+0x234>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f000 fbc0 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 8001028:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800102c:	f000 fbd6 	bl	80017dc <setTimer2>
			setTimer3(250);
 8001030:	20fa      	movs	r0, #250	; 0xfa
 8001032:	f000 fbed 	bl	8001810 <setTimer3>
		}
		break;
 8001036:	e156      	b.n	80012e6 <runMode1+0x3fe>
	case M1_RED_YELLOW:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2102      	movs	r1, #2
 800103c:	4838      	ldr	r0, [pc, #224]	; (8001120 <runMode1+0x238>)
 800103e:	f000 ff6c 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2104      	movs	r1, #4
 8001046:	4836      	ldr	r0, [pc, #216]	; (8001120 <runMode1+0x238>)
 8001048:	f000 ff67 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2108      	movs	r1, #8
 8001050:	4833      	ldr	r0, [pc, #204]	; (8001120 <runMode1+0x238>)
 8001052:	f000 ff62 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2110      	movs	r1, #16
 800105a:	4831      	ldr	r0, [pc, #196]	; (8001120 <runMode1+0x238>)
 800105c:	f000 ff5d 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2120      	movs	r1, #32
 8001064:	482e      	ldr	r0, [pc, #184]	; (8001120 <runMode1+0x238>)
 8001066:	f000 ff58 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	482c      	ldr	r0, [pc, #176]	; (8001120 <runMode1+0x238>)
 8001070:	f000 ff53 	bl	8001f1a <HAL_GPIO_WritePin>

		display7SEG_1(count1);
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <runMode1+0x230>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f867 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <runMode1+0x234>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa64 	bl	8000550 <display7SEG_2>
		display7SEG_mode(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fcb3 	bl	80009f4 <display7SEG_mode>

		if (timer1_flag == 1){
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <runMode1+0x23c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d10d      	bne.n	80010b2 <runMode1+0x1ca>
			setTimer1(1000);
 8001096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109a:	f000 fb85 	bl	80017a8 <setTimer1>
			count1--;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <runMode1+0x230>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <runMode1+0x230>)
 80010a6:	6013      	str	r3, [r2, #0]
			count2--;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <runMode1+0x234>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <runMode1+0x234>)
 80010b0:	6013      	str	r3, [r2, #0]
		}

		if (timer2_flag == 1){
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <runMode1+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d110      	bne.n	80010dc <runMode1+0x1f4>
			status = M1_GREEN_RED;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <runMode1+0x22c>)
 80010bc:	220d      	movs	r2, #13
 80010be:	601a      	str	r2, [r3, #0]
			count1 = 25;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <runMode1+0x230>)
 80010c2:	2219      	movs	r2, #25
 80010c4:	601a      	str	r2, [r3, #0]
			count2 = 30;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <runMode1+0x234>)
 80010c8:	221e      	movs	r2, #30
 80010ca:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80010cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d0:	f000 fb6a 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80010d4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80010d8:	f000 fb80 	bl	80017dc <setTimer2>
		}

		if (is_button_pressed(0)){
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fda9 	bl	8000c34 <is_button_pressed>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8100 	beq.w	80012ea <runMode1+0x402>
			status = M2;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <runMode1+0x22c>)
 80010ec:	2214      	movs	r2, #20
 80010ee:	601a      	str	r2, [r3, #0]
			count1 = 20;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <runMode1+0x230>)
 80010f2:	2214      	movs	r2, #20
 80010f4:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <runMode1+0x234>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001100:	f000 fb52 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 8001104:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001108:	f000 fb68 	bl	80017dc <setTimer2>
			setTimer3(250);
 800110c:	20fa      	movs	r0, #250	; 0xfa
 800110e:	f000 fb7f 	bl	8001810 <setTimer3>
		}
		break;
 8001112:	e0ea      	b.n	80012ea <runMode1+0x402>
 8001114:	2000004c 	.word	0x2000004c
 8001118:	20000044 	.word	0x20000044
 800111c:	20000048 	.word	0x20000048
 8001120:	40010800 	.word	0x40010800
 8001124:	200000a8 	.word	0x200000a8
 8001128:	200000ac 	.word	0x200000ac
	case M1_GREEN_RED:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	4871      	ldr	r0, [pc, #452]	; (80012f8 <runMode1+0x410>)
 8001132:	f000 fef2 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2104      	movs	r1, #4
 800113a:	486f      	ldr	r0, [pc, #444]	; (80012f8 <runMode1+0x410>)
 800113c:	f000 feed 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2108      	movs	r1, #8
 8001144:	486c      	ldr	r0, [pc, #432]	; (80012f8 <runMode1+0x410>)
 8001146:	f000 fee8 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	486a      	ldr	r0, [pc, #424]	; (80012f8 <runMode1+0x410>)
 8001150:	f000 fee3 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2120      	movs	r1, #32
 8001158:	4867      	ldr	r0, [pc, #412]	; (80012f8 <runMode1+0x410>)
 800115a:	f000 fede 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4865      	ldr	r0, [pc, #404]	; (80012f8 <runMode1+0x410>)
 8001164:	f000 fed9 	bl	8001f1a <HAL_GPIO_WritePin>

		display7SEG_1(count1);
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <runMode1+0x414>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7fe ffed 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <runMode1+0x418>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9ea 	bl	8000550 <display7SEG_2>
		display7SEG_mode(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fc39 	bl	80009f4 <display7SEG_mode>

		if (timer1_flag == 1){
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <runMode1+0x41c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10d      	bne.n	80011a6 <runMode1+0x2be>
			setTimer1(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118e:	f000 fb0b 	bl	80017a8 <setTimer1>
			count1--;
 8001192:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <runMode1+0x414>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <runMode1+0x414>)
 800119a:	6013      	str	r3, [r2, #0]
			count2--;
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <runMode1+0x418>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a57      	ldr	r2, [pc, #348]	; (8001300 <runMode1+0x418>)
 80011a4:	6013      	str	r3, [r2, #0]
		}

		if (timer2_flag == 1){
 80011a6:	4b58      	ldr	r3, [pc, #352]	; (8001308 <runMode1+0x420>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d110      	bne.n	80011d0 <runMode1+0x2e8>
			status = M1_YELLOW_RED;
 80011ae:	4b57      	ldr	r3, [pc, #348]	; (800130c <runMode1+0x424>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	601a      	str	r2, [r3, #0]
			count1 = 5;
 80011b4:	4b51      	ldr	r3, [pc, #324]	; (80012fc <runMode1+0x414>)
 80011b6:	2205      	movs	r2, #5
 80011b8:	601a      	str	r2, [r3, #0]
			count2 = 5;
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <runMode1+0x418>)
 80011bc:	2205      	movs	r2, #5
 80011be:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 faf0 	bl	80017a8 <setTimer1>
			setTimer2(5000);
 80011c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80011cc:	f000 fb06 	bl	80017dc <setTimer2>
		}

		if (is_button_pressed(0)){
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fd2f 	bl	8000c34 <is_button_pressed>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8088 	beq.w	80012ee <runMode1+0x406>
			status = M2;
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <runMode1+0x424>)
 80011e0:	2214      	movs	r2, #20
 80011e2:	601a      	str	r2, [r3, #0]
			count1 = 20;
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <runMode1+0x414>)
 80011e6:	2214      	movs	r2, #20
 80011e8:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <runMode1+0x418>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80011f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f4:	f000 fad8 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80011f8:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80011fc:	f000 faee 	bl	80017dc <setTimer2>
			setTimer3(250);
 8001200:	20fa      	movs	r0, #250	; 0xfa
 8001202:	f000 fb05 	bl	8001810 <setTimer3>
		}
		break;
 8001206:	e072      	b.n	80012ee <runMode1+0x406>
	case M1_YELLOW_RED:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	483a      	ldr	r0, [pc, #232]	; (80012f8 <runMode1+0x410>)
 800120e:	f000 fe84 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2104      	movs	r1, #4
 8001216:	4838      	ldr	r0, [pc, #224]	; (80012f8 <runMode1+0x410>)
 8001218:	f000 fe7f 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2108      	movs	r1, #8
 8001220:	4835      	ldr	r0, [pc, #212]	; (80012f8 <runMode1+0x410>)
 8001222:	f000 fe7a 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <runMode1+0x410>)
 800122c:	f000 fe75 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2120      	movs	r1, #32
 8001234:	4830      	ldr	r0, [pc, #192]	; (80012f8 <runMode1+0x410>)
 8001236:	f000 fe70 	bl	8001f1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	482e      	ldr	r0, [pc, #184]	; (80012f8 <runMode1+0x410>)
 8001240:	f000 fe6b 	bl	8001f1a <HAL_GPIO_WritePin>

		display7SEG_1(count1);
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <runMode1+0x414>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ff7f 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <runMode1+0x418>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f97c 	bl	8000550 <display7SEG_2>
		display7SEG_mode(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fbcb 	bl	80009f4 <display7SEG_mode>

		if (timer1_flag == 1){
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <runMode1+0x41c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10d      	bne.n	8001282 <runMode1+0x39a>
			setTimer1(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f000 fa9d 	bl	80017a8 <setTimer1>
			count1--;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <runMode1+0x414>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <runMode1+0x414>)
 8001276:	6013      	str	r3, [r2, #0]
			count2--;
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <runMode1+0x418>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <runMode1+0x418>)
 8001280:	6013      	str	r3, [r2, #0]
		}

		if (timer2_flag == 1){
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <runMode1+0x420>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d110      	bne.n	80012ac <runMode1+0x3c4>
			status = M1_RED_GREEN;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <runMode1+0x424>)
 800128c:	220b      	movs	r2, #11
 800128e:	601a      	str	r2, [r3, #0]
			count1 = 30;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <runMode1+0x414>)
 8001292:	221e      	movs	r2, #30
 8001294:	601a      	str	r2, [r3, #0]
			count2 = 25;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <runMode1+0x418>)
 8001298:	2219      	movs	r2, #25
 800129a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a0:	f000 fa82 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80012a4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80012a8:	f000 fa98 	bl	80017dc <setTimer2>
		}

		if (is_button_pressed(0)){
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fcc1 	bl	8000c34 <is_button_pressed>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01c      	beq.n	80012f2 <runMode1+0x40a>
			status = M2;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <runMode1+0x424>)
 80012ba:	2214      	movs	r2, #20
 80012bc:	601a      	str	r2, [r3, #0]
			count1 = 20;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <runMode1+0x414>)
 80012c0:	2214      	movs	r2, #20
 80012c2:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <runMode1+0x418>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ce:	f000 fa6b 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80012d2:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80012d6:	f000 fa81 	bl	80017dc <setTimer2>
			setTimer3(250);
 80012da:	20fa      	movs	r0, #250	; 0xfa
 80012dc:	f000 fa98 	bl	8001810 <setTimer3>
		}
		break;
 80012e0:	e007      	b.n	80012f2 <runMode1+0x40a>
	default:
		break;
 80012e2:	bf00      	nop
 80012e4:	e006      	b.n	80012f4 <runMode1+0x40c>
		break;
 80012e6:	bf00      	nop
 80012e8:	e004      	b.n	80012f4 <runMode1+0x40c>
		break;
 80012ea:	bf00      	nop
 80012ec:	e002      	b.n	80012f4 <runMode1+0x40c>
		break;
 80012ee:	bf00      	nop
 80012f0:	e000      	b.n	80012f4 <runMode1+0x40c>
		break;
 80012f2:	bf00      	nop
	}
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010800 	.word	0x40010800
 80012fc:	20000044 	.word	0x20000044
 8001300:	20000048 	.word	0x20000048
 8001304:	200000a8 	.word	0x200000a8
 8001308:	200000ac 	.word	0x200000ac
 800130c:	2000004c 	.word	0x2000004c

08001310 <runMode2>:
 *      Author: Admin
 */

#include "mode_2.h"

void runMode2(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	if (status == M2){
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <runMode2+0x118>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b14      	cmp	r3, #20
 800131a:	f040 8082 	bne.w	8001422 <runMode2+0x112>
		display7SEG_1(count1);
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <runMode2+0x11c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff12 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <runMode2+0x120>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f90f 	bl	8000550 <display7SEG_2>
		display7SEG_mode(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff fb5e 	bl	80009f4 <display7SEG_mode>

		if (timer3_flag == 1){
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <runMode2+0x124>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d11e      	bne.n	800137e <runMode2+0x6e>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8001340:	2102      	movs	r1, #2
 8001342:	483d      	ldr	r0, [pc, #244]	; (8001438 <runMode2+0x128>)
 8001344:	f000 fe01 	bl	8001f4a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8001348:	2110      	movs	r1, #16
 800134a:	483b      	ldr	r0, [pc, #236]	; (8001438 <runMode2+0x128>)
 800134c:	f000 fdfd 	bl	8001f4a <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2104      	movs	r1, #4
 8001354:	4838      	ldr	r0, [pc, #224]	; (8001438 <runMode2+0x128>)
 8001356:	f000 fde0 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	4836      	ldr	r0, [pc, #216]	; (8001438 <runMode2+0x128>)
 8001360:	f000 fddb 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2120      	movs	r1, #32
 8001368:	4833      	ldr	r0, [pc, #204]	; (8001438 <runMode2+0x128>)
 800136a:	f000 fdd6 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	4831      	ldr	r0, [pc, #196]	; (8001438 <runMode2+0x128>)
 8001374:	f000 fdd1 	bl	8001f1a <HAL_GPIO_WritePin>
			setTimer3(250);
 8001378:	20fa      	movs	r0, #250	; 0xfa
 800137a:	f000 fa49 	bl	8001810 <setTimer3>
		}

		if (timer1_flag == 1){
 800137e:	4b2f      	ldr	r3, [pc, #188]	; (800143c <runMode2+0x12c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d108      	bne.n	8001398 <runMode2+0x88>
			count1--;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <runMode2+0x11c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <runMode2+0x11c>)
 800138e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f000 fa08 	bl	80017a8 <setTimer1>
		}

		if (is_button_pressed(0) || timer2_flag == 1){
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fc4b 	bl	8000c34 <is_button_pressed>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <runMode2+0x9c>
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <runMode2+0x130>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d113      	bne.n	80013d4 <runMode2+0xc4>
			status = M3;
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <runMode2+0x118>)
 80013ae:	221e      	movs	r2, #30
 80013b0:	601a      	str	r2, [r3, #0]
			count1 = 20;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <runMode2+0x11c>)
 80013b4:	2214      	movs	r2, #20
 80013b6:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <runMode2+0x120>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c2:	f000 f9f1 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80013c6:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80013ca:	f000 fa07 	bl	80017dc <setTimer2>
			setTimer3(250);
 80013ce:	20fa      	movs	r0, #250	; 0xfa
 80013d0:	f000 fa1e 	bl	8001810 <setTimer3>
		}

		if (is_button_pressed(1) || is_button_pressed_1s(1)){
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff fc2d 	bl	8000c34 <is_button_pressed>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <runMode2+0xdc>
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fc47 	bl	8000c74 <is_button_pressed_1s>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <runMode2+0xe6>
			count2++;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <runMode2+0x120>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <runMode2+0x120>)
 80013f4:	6013      	str	r3, [r2, #0]
		}
		if (is_button_pressed(2)){
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff fc1c 	bl	8000c34 <is_button_pressed>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00f      	beq.n	8001422 <runMode2+0x112>
			count1 = count2;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <runMode2+0x120>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <runMode2+0x11c>)
 8001408:	6013      	str	r3, [r2, #0]
			setTimer2(count2*1000);
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <runMode2+0x120>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f9e0 	bl	80017dc <setTimer2>
			count2 = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <runMode2+0x120>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000004c 	.word	0x2000004c
 800142c:	20000044 	.word	0x20000044
 8001430:	20000048 	.word	0x20000048
 8001434:	200000b0 	.word	0x200000b0
 8001438:	40010800 	.word	0x40010800
 800143c:	200000a8 	.word	0x200000a8
 8001440:	200000ac 	.word	0x200000ac

08001444 <runMode3>:
 *
 *  Created on: Nov 13, 2023
 *      Author: Admin
 */
#include "mode_3.h"
void runMode3(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if (status == M3){
 8001448:	4b44      	ldr	r3, [pc, #272]	; (800155c <runMode3+0x118>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b1e      	cmp	r3, #30
 800144e:	f040 8082 	bne.w	8001556 <runMode3+0x112>
		display7SEG_1(count1);
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <runMode3+0x11c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe fe78 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <runMode3+0x120>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f875 	bl	8000550 <display7SEG_2>
		display7SEG_mode(3);
 8001466:	2003      	movs	r0, #3
 8001468:	f7ff fac4 	bl	80009f4 <display7SEG_mode>

		if (timer3_flag == 1){
 800146c:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <runMode3+0x124>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d11e      	bne.n	80014b2 <runMode3+0x6e>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8001474:	2104      	movs	r1, #4
 8001476:	483d      	ldr	r0, [pc, #244]	; (800156c <runMode3+0x128>)
 8001478:	f000 fd67 	bl	8001f4a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 800147c:	2120      	movs	r1, #32
 800147e:	483b      	ldr	r0, [pc, #236]	; (800156c <runMode3+0x128>)
 8001480:	f000 fd63 	bl	8001f4a <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2102      	movs	r1, #2
 8001488:	4838      	ldr	r0, [pc, #224]	; (800156c <runMode3+0x128>)
 800148a:	f000 fd46 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2108      	movs	r1, #8
 8001492:	4836      	ldr	r0, [pc, #216]	; (800156c <runMode3+0x128>)
 8001494:	f000 fd41 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2110      	movs	r1, #16
 800149c:	4833      	ldr	r0, [pc, #204]	; (800156c <runMode3+0x128>)
 800149e:	f000 fd3c 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <runMode3+0x128>)
 80014a8:	f000 fd37 	bl	8001f1a <HAL_GPIO_WritePin>
			setTimer3(250);
 80014ac:	20fa      	movs	r0, #250	; 0xfa
 80014ae:	f000 f9af 	bl	8001810 <setTimer3>
		}

		if (timer1_flag == 1){
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <runMode3+0x12c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <runMode3+0x88>
			count1--;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <runMode3+0x11c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <runMode3+0x11c>)
 80014c2:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80014c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c8:	f000 f96e 	bl	80017a8 <setTimer1>
		}

		if (is_button_pressed(0) || timer2_flag == 1){
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fbb1 	bl	8000c34 <is_button_pressed>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d103      	bne.n	80014e0 <runMode3+0x9c>
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <runMode3+0x130>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d113      	bne.n	8001508 <runMode3+0xc4>
			status = M4;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <runMode3+0x118>)
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	601a      	str	r2, [r3, #0]
			count1 = 20;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <runMode3+0x11c>)
 80014e8:	2214      	movs	r2, #20
 80014ea:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <runMode3+0x120>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f6:	f000 f957 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 80014fa:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80014fe:	f000 f96d 	bl	80017dc <setTimer2>
			setTimer3(250);
 8001502:	20fa      	movs	r0, #250	; 0xfa
 8001504:	f000 f984 	bl	8001810 <setTimer3>
		}

		if (is_button_pressed(1) || is_button_pressed_1s(1)){
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fb93 	bl	8000c34 <is_button_pressed>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <runMode3+0xdc>
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fbad 	bl	8000c74 <is_button_pressed_1s>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <runMode3+0xe6>
			count2++;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <runMode3+0x120>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <runMode3+0x120>)
 8001528:	6013      	str	r3, [r2, #0]
		}
		if (is_button_pressed(2)){
 800152a:	2002      	movs	r0, #2
 800152c:	f7ff fb82 	bl	8000c34 <is_button_pressed>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00f      	beq.n	8001556 <runMode3+0x112>
			count1 = count2;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <runMode3+0x120>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <runMode3+0x11c>)
 800153c:	6013      	str	r3, [r2, #0]
			setTimer2(count2*1000);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <runMode3+0x120>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f946 	bl	80017dc <setTimer2>
			count2 = 0;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <runMode3+0x120>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000004c 	.word	0x2000004c
 8001560:	20000044 	.word	0x20000044
 8001564:	20000048 	.word	0x20000048
 8001568:	200000b0 	.word	0x200000b0
 800156c:	40010800 	.word	0x40010800
 8001570:	200000a8 	.word	0x200000a8
 8001574:	200000ac 	.word	0x200000ac

08001578 <runMode4>:
 *      Author: Admin
 */

#include "mode_4.h"

void runMode4(){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	if (status == M4){
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <runMode4+0x118>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b28      	cmp	r3, #40	; 0x28
 8001582:	f040 8082 	bne.w	800168a <runMode4+0x112>
		display7SEG_1(count1);
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <runMode4+0x11c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fdde 	bl	800014c <display7SEG_1>
		display7SEG_2(count2);
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <runMode4+0x120>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffdb 	bl	8000550 <display7SEG_2>
		display7SEG_mode(4);
 800159a:	2004      	movs	r0, #4
 800159c:	f7ff fa2a 	bl	80009f4 <display7SEG_mode>

		if (timer3_flag == 1){
 80015a0:	4b3e      	ldr	r3, [pc, #248]	; (800169c <runMode4+0x124>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d11e      	bne.n	80015e6 <runMode4+0x6e>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80015a8:	2108      	movs	r1, #8
 80015aa:	483d      	ldr	r0, [pc, #244]	; (80016a0 <runMode4+0x128>)
 80015ac:	f000 fccd 	bl	8001f4a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	483b      	ldr	r0, [pc, #236]	; (80016a0 <runMode4+0x128>)
 80015b4:	f000 fcc9 	bl	8001f4a <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2104      	movs	r1, #4
 80015bc:	4838      	ldr	r0, [pc, #224]	; (80016a0 <runMode4+0x128>)
 80015be:	f000 fcac 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2102      	movs	r1, #2
 80015c6:	4836      	ldr	r0, [pc, #216]	; (80016a0 <runMode4+0x128>)
 80015c8:	f000 fca7 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2120      	movs	r1, #32
 80015d0:	4833      	ldr	r0, [pc, #204]	; (80016a0 <runMode4+0x128>)
 80015d2:	f000 fca2 	bl	8001f1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2110      	movs	r1, #16
 80015da:	4831      	ldr	r0, [pc, #196]	; (80016a0 <runMode4+0x128>)
 80015dc:	f000 fc9d 	bl	8001f1a <HAL_GPIO_WritePin>
			setTimer3(250);
 80015e0:	20fa      	movs	r0, #250	; 0xfa
 80015e2:	f000 f915 	bl	8001810 <setTimer3>
		}

		if (timer1_flag == 1){
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <runMode4+0x12c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <runMode4+0x88>
			count1--;
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <runMode4+0x11c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <runMode4+0x11c>)
 80015f6:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fc:	f000 f8d4 	bl	80017a8 <setTimer1>
		}

		if (is_button_pressed(0) || timer2_flag == 1){
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fb17 	bl	8000c34 <is_button_pressed>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <runMode4+0x9c>
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <runMode4+0x130>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d113      	bne.n	800163c <runMode4+0xc4>
			status = M1_RED_GREEN;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <runMode4+0x118>)
 8001616:	220b      	movs	r2, #11
 8001618:	601a      	str	r2, [r3, #0]
			count1 = 20;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <runMode4+0x11c>)
 800161c:	2214      	movs	r2, #20
 800161e:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <runMode4+0x120>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800162a:	f000 f8bd 	bl	80017a8 <setTimer1>
			setTimer2(25000);
 800162e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001632:	f000 f8d3 	bl	80017dc <setTimer2>
			setTimer3(250);
 8001636:	20fa      	movs	r0, #250	; 0xfa
 8001638:	f000 f8ea 	bl	8001810 <setTimer3>
		}

		if (is_button_pressed(1) || is_button_pressed_1s(1)){
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff faf9 	bl	8000c34 <is_button_pressed>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <runMode4+0xdc>
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff fb13 	bl	8000c74 <is_button_pressed_1s>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <runMode4+0xe6>
			count2++;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <runMode4+0x120>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <runMode4+0x120>)
 800165c:	6013      	str	r3, [r2, #0]
		}
		if (is_button_pressed(2)){
 800165e:	2002      	movs	r0, #2
 8001660:	f7ff fae8 	bl	8000c34 <is_button_pressed>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00f      	beq.n	800168a <runMode4+0x112>
			count1 = count2;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <runMode4+0x120>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <runMode4+0x11c>)
 8001670:	6013      	str	r3, [r2, #0]
			setTimer2(count2*1000);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <runMode4+0x120>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f8ac 	bl	80017dc <setTimer2>
			count2 = 0;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <runMode4+0x120>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
		}
	}
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000004c 	.word	0x2000004c
 8001694:	20000044 	.word	0x20000044
 8001698:	20000048 	.word	0x20000048
 800169c:	200000b0 	.word	0x200000b0
 80016a0:	40010800 	.word	0x40010800
 80016a4:	200000a8 	.word	0x200000a8
 80016a8:	200000ac 	.word	0x200000ac

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_MspInit+0x40>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_MspInit+0x40>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_MspInit+0x40>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_MspInit+0x40>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_MspInit+0x40>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_MspInit+0x40>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001700:	d113      	bne.n	800172a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fa31 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fa4a 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f90f 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f001 f86f 	bl	8002870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000054 	.word	0x20000054

0800179c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <setTimer1>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;
int TIMER_CYCLE = 10;

void setTimer1(int duration){
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <setTimer1+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <setTimer1+0x2c>)
 80017bc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <setTimer1+0x30>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000001c 	.word	0x2000001c
 80017d4:	2000009c 	.word	0x2000009c
 80017d8:	200000a8 	.word	0x200000a8

080017dc <setTimer2>:

void setTimer2(int duration){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <setTimer2+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <setTimer2+0x2c>)
 80017f0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setTimer2+0x30>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000001c 	.word	0x2000001c
 8001808:	200000a0 	.word	0x200000a0
 800180c:	200000ac 	.word	0x200000ac

08001810 <setTimer3>:

void setTimer3(int duration){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <setTimer3+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <setTimer3+0x2c>)
 8001824:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <setTimer3+0x30>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000001c 	.word	0x2000001c
 800183c:	200000a4 	.word	0x200000a4
 8001840:	200000b0 	.word	0x200000b0

08001844 <timer_run>:

void timer_run(){
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <timer_run+0x6c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dd0b      	ble.n	8001868 <timer_run+0x24>
		timer1_counter--;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <timer_run+0x6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <timer_run+0x6c>)
 8001858:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0){
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <timer_run+0x6c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <timer_run+0x24>
			timer1_flag = 1;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <timer_run+0x70>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <timer_run+0x74>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd0b      	ble.n	8001888 <timer_run+0x44>
		timer2_counter--;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <timer_run+0x74>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <timer_run+0x74>)
 8001878:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0){
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <timer_run+0x74>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <timer_run+0x44>
			timer2_flag = 1;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <timer_run+0x78>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <timer_run+0x7c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0b      	ble.n	80018a8 <timer_run+0x64>
		timer3_counter--;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <timer_run+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <timer_run+0x7c>)
 8001898:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0){
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <timer_run+0x7c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <timer_run+0x64>
			timer3_flag = 1;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <timer_run+0x80>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	2000009c 	.word	0x2000009c
 80018b4:	200000a8 	.word	0x200000a8
 80018b8:	200000a0 	.word	0x200000a0
 80018bc:	200000ac 	.word	0x200000ac
 80018c0:	200000a4 	.word	0x200000a4
 80018c4:	200000b0 	.word	0x200000b0

080018c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff ff68 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480b      	ldr	r0, [pc, #44]	; (80018fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018e4:	4c09      	ldr	r4, [pc, #36]	; (800190c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f001 fb09 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018f6:	f7ff f9dd 	bl	8000cb4 <main>
  bx lr
 80018fa:	4770      	bx	lr
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001904:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8001908:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800190c:	200000b8 	.word	0x200000b8

08001910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_2_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_Init+0x28>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_Init+0x28>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f923 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	200f      	movs	r0, #15
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff febc 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f93b 	bl	8001bda <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f903 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000018 	.word	0x20000018
 8001998:	20000024 	.word	0x20000024
 800199c:	20000020 	.word	0x20000020

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x1c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x20>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_IncTick+0x20>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000024 	.word	0x20000024
 80019c0:	200000b4 	.word	0x200000b4

080019c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <HAL_GetTick+0x10>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	200000b4 	.word	0x200000b4

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <__NVIC_EnableIRQ+0x34>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff90 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff2d 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff42 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff90 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5f 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff35 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	e161      	b.n	8001ecc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8150 	bne.w	8001ec6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a97      	ldr	r2, [pc, #604]	; (8001e88 <HAL_GPIO_Init+0x294>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d05e      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c30:	4a95      	ldr	r2, [pc, #596]	; (8001e88 <HAL_GPIO_Init+0x294>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d875      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c36:	4a95      	ldr	r2, [pc, #596]	; (8001e8c <HAL_GPIO_Init+0x298>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d058      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c3c:	4a93      	ldr	r2, [pc, #588]	; (8001e8c <HAL_GPIO_Init+0x298>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d86f      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_GPIO_Init+0x29c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d052      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c48:	4a91      	ldr	r2, [pc, #580]	; (8001e90 <HAL_GPIO_Init+0x29c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d869      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a91      	ldr	r2, [pc, #580]	; (8001e94 <HAL_GPIO_Init+0x2a0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04c      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c54:	4a8f      	ldr	r2, [pc, #572]	; (8001e94 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d863      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a8f      	ldr	r2, [pc, #572]	; (8001e98 <HAL_GPIO_Init+0x2a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d046      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c60:	4a8d      	ldr	r2, [pc, #564]	; (8001e98 <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d85d      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d82a      	bhi.n	8001cc0 <HAL_GPIO_Init+0xcc>
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d859      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_GPIO_Init+0x80>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001cdb 	.word	0x08001cdb
 8001c80:	08001d1d 	.word	0x08001d1d
 8001c84:	08001d23 	.word	0x08001d23
 8001c88:	08001d23 	.word	0x08001d23
 8001c8c:	08001d23 	.word	0x08001d23
 8001c90:	08001d23 	.word	0x08001d23
 8001c94:	08001d23 	.word	0x08001d23
 8001c98:	08001d23 	.word	0x08001d23
 8001c9c:	08001d23 	.word	0x08001d23
 8001ca0:	08001d23 	.word	0x08001d23
 8001ca4:	08001d23 	.word	0x08001d23
 8001ca8:	08001d23 	.word	0x08001d23
 8001cac:	08001d23 	.word	0x08001d23
 8001cb0:	08001d23 	.word	0x08001d23
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001cd1 	.word	0x08001cd1
 8001cbc:	08001ce5 	.word	0x08001ce5
 8001cc0:	4a76      	ldr	r2, [pc, #472]	; (8001e9c <HAL_GPIO_Init+0x2a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc6:	e02c      	b.n	8001d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e029      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e024      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e01f      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e01a      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e013      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	611a      	str	r2, [r3, #16]
          break;
 8001d0e:	e009      	b.n	8001d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	615a      	str	r2, [r3, #20]
          break;
 8001d1a:	e003      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          break;
 8001d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d801      	bhi.n	8001d2e <HAL_GPIO_Init+0x13a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	e001      	b.n	8001d32 <HAL_GPIO_Init+0x13e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d802      	bhi.n	8001d40 <HAL_GPIO_Init+0x14c>
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x152>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3b08      	subs	r3, #8
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	6a39      	ldr	r1, [r7, #32]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a9 	beq.w	8001ec6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d8c:	4a45      	ldr	r2, [pc, #276]	; (8001ea4 <HAL_GPIO_Init+0x2b0>)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <HAL_GPIO_Init+0x2b4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_GPIO_Init+0x2b8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_GPIO_Init+0x2bc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1d8>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x2b0>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491d      	ldr	r1, [pc, #116]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4913      	ldr	r1, [pc, #76]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01f      	beq.n	8001eb8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e01f      	b.n	8001ec6 <HAL_GPIO_Init+0x2d2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f47f ae96 	bne.w	8001c08 <HAL_GPIO_Init+0x14>
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	372c      	adds	r7, #44	; 0x2c
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40010400 	.word	0x40010400

08001eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	807b      	strh	r3, [r7, #2]
 8001f26:	4613      	mov	r3, r2
 8001f28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2a:	787b      	ldrb	r3, [r7, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f36:	e003      	b.n	8001f40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	611a      	str	r2, [r3, #16]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e272      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f9c:	4b92      	ldr	r3, [pc, #584]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa8:	4b8f      	ldr	r3, [pc, #572]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d112      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
 8001fb4:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d10b      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc2:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d06c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x12c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d168      	bne.n	80020a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e24c      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x76>
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7f      	ldr	r2, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e02e      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x98>
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b78      	ldr	r3, [pc, #480]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a77      	ldr	r2, [pc, #476]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0xbc>
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a71      	ldr	r2, [pc, #452]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002038:	4b6b      	ldr	r3, [pc, #428]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a67      	ldr	r2, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fcb4 	bl	80019c4 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fcb0 	bl	80019c4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e200      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xe4>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fca0 	bl	80019c4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fc9c 	bl	80019c4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1ec      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x10c>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_OscConfig+0x18c>
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x176>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1c0      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4939      	ldr	r1, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e03a      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCC_OscConfig+0x270>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff fc55 	bl	80019c4 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff fc51 	bl	80019c4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1a1      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_RCC_OscConfig+0x270>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fc34 	bl	80019c4 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff fc30 	bl	80019c4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e180      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03a      	beq.n	8002200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff fc14 	bl	80019c4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff fc10 	bl	80019c4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e160      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021be:	2001      	movs	r0, #1
 80021c0:	f000 fa9c 	bl	80026fc <RCC_Delay>
 80021c4:	e01c      	b.n	8002200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fbfa 	bl	80019c4 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d2:	e00f      	b.n	80021f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fbf6 	bl	80019c4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d908      	bls.n	80021f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e146      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	42420000 	.word	0x42420000
 80021f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e9      	bne.n	80021d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a6 	beq.w	800235a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b82      	ldr	r3, [pc, #520]	; (8002444 <HAL_RCC_OscConfig+0x4c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b7f      	ldr	r3, [pc, #508]	; (8002444 <HAL_RCC_OscConfig+0x4c8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7e      	ldr	r2, [pc, #504]	; (8002444 <HAL_RCC_OscConfig+0x4c8>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff fbb7 	bl	80019c4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff fbb3 	bl	80019c4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e103      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCC_OscConfig+0x4c8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x312>
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6213      	str	r3, [r2, #32]
 800228c:	e02d      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x334>
 8002296:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b67      	ldr	r3, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a66      	ldr	r2, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	e01c      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x356>
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a60      	ldr	r2, [pc, #384]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a5d      	ldr	r2, [pc, #372]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x36e>
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a5a      	ldr	r2, [pc, #360]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b58      	ldr	r3, [pc, #352]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a57      	ldr	r2, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb67 	bl	80019c4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb63 	bl	80019c4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0b1      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ee      	beq.n	80022fa <HAL_RCC_OscConfig+0x37e>
 800231c:	e014      	b.n	8002348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fb51 	bl	80019c4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff fb4d 	bl	80019c4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e09b      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ee      	bne.n	8002326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8087 	beq.w	8002472 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d061      	beq.n	8002434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d146      	bne.n	8002406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b33      	ldr	r3, [pc, #204]	; (8002448 <HAL_RCC_OscConfig+0x4cc>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fb21 	bl	80019c4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fb1d 	bl	80019c4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e06d      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4921      	ldr	r1, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a19      	ldr	r1, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	430b      	orrs	r3, r1
 80023d2:	491b      	ldr	r1, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x4cc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff faf1 	bl	80019c4 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff faed 	bl	80019c4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e03d      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x46a>
 8002404:	e035      	b.n	8002472 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_RCC_OscConfig+0x4cc>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fada 	bl	80019c4 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff fad6 	bl	80019c4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e026      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x498>
 8002432:	e01e      	b.n	8002472 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e019      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x500>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	429a      	cmp	r2, r3
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0d0      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d910      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4965      	ldr	r1, [pc, #404]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0b8      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a52      	ldr	r2, [pc, #328]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	494d      	ldr	r1, [pc, #308]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d040      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d115      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e07f      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e073      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06b      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4936      	ldr	r1, [pc, #216]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002570:	f7ff fa28 	bl	80019c4 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	e00a      	b.n	800258e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7ff fa24 	bl	80019c4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e053      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 020c 	and.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1eb      	bne.n	8002578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d210      	bcs.n	80025d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4922      	ldr	r1, [pc, #136]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e032      	b.n	8002636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4916      	ldr	r1, [pc, #88]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	490e      	ldr	r1, [pc, #56]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800260e:	f000 f821 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8002612:	4602      	mov	r2, r0
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	490a      	ldr	r1, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	5ccb      	ldrb	r3, [r1, r3]
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1cc>)
 8002628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1d0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f986 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000
 8002644:	40021000 	.word	0x40021000
 8002648:	08002f78 	.word	0x08002f78
 800264c:	20000018 	.word	0x20000018
 8002650:	20000020 	.word	0x20000020

08002654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x30>
 800267e:	2b08      	cmp	r3, #8
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x36>
 8002682:	e027      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002686:	613b      	str	r3, [r7, #16]
      break;
 8002688:	e027      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0c5b      	lsrs	r3, r3, #17
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <HAL_RCC_GetSysClockFreq+0x98>)
 80026b6:	fb03 f202 	mul.w	r2, r3, r2
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e004      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	613b      	str	r3, [r7, #16]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetSysClockFreq+0x98>)
 80026d6:	613b      	str	r3, [r7, #16]
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	693b      	ldr	r3, [r7, #16]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	08002f88 	.word	0x08002f88
 80026f4:	08002f98 	.word	0x08002f98
 80026f8:	003d0900 	.word	0x003d0900

080026fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <RCC_Delay+0x34>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <RCC_Delay+0x38>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002718:	bf00      	nop
  }
  while (Delay --);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <RCC_Delay+0x1c>
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20000018 	.word	0x20000018
 8002734:	10624dd3 	.word	0x10624dd3

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e041      	b.n	80027ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe ffc6 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 fa6e 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e035      	b.n	800285c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_TIM_Base_Start_IT+0x90>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0x4e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d004      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0x4e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_TIM_Base_Start_IT+0x94>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d010      	beq.n	800285a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	e007      	b.n	800285a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40000400 	.word	0x40000400

08002870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0202 	mvn.w	r2, #2
 800289c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9b4 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9a7 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9b6 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0204 	mvn.w	r2, #4
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f98a 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f97d 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f98c 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b08      	cmp	r3, #8
 800292c:	d122      	bne.n	8002974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b08      	cmp	r3, #8
 800293a:	d11b      	bne.n	8002974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0208 	mvn.w	r2, #8
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f960 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f953 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f962 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b10      	cmp	r3, #16
 8002980:	d122      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b10      	cmp	r3, #16
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0210 	mvn.w	r2, #16
 8002998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2208      	movs	r2, #8
 800299e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f936 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f929 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f938 	bl	8002c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0201 	mvn.w	r2, #1
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fa64 	bl	8000ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b80      	cmp	r3, #128	; 0x80
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d107      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa6b 	bl	8002ef6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d10e      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d107      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8fc 	bl	8002c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0220 	mvn.w	r2, #32
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa36 	bl	8002ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_ConfigClockSource+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e0b4      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x186>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d03e      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0xd4>
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	f200 8087 	bhi.w	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_TIM_ConfigClockSource+0x172>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d87f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b70      	cmp	r3, #112	; 0x70
 8002aee:	d01a      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0xa6>
 8002af0:	2b70      	cmp	r3, #112	; 0x70
 8002af2:	d87b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b60      	cmp	r3, #96	; 0x60
 8002af6:	d050      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x11a>
 8002af8:	2b60      	cmp	r3, #96	; 0x60
 8002afa:	d877      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d03c      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0xfa>
 8002b00:	2b50      	cmp	r3, #80	; 0x50
 8002b02:	d873      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d058      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x13a>
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d86f      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b30      	cmp	r3, #48	; 0x30
 8002b0e:	d064      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	2b30      	cmp	r3, #48	; 0x30
 8002b12:	d86b      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d060      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d867      	bhi.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d05c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d05a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	e062      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f000 f95e 	bl	8002df6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	609a      	str	r2, [r3, #8]
      break;
 8002b52:	e04f      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f000 f947 	bl	8002df6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b76:	609a      	str	r2, [r3, #8]
      break;
 8002b78:	e03c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f000 f8be 	bl	8002d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2150      	movs	r1, #80	; 0x50
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f915 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002b98:	e02c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f000 f8dc 	bl	8002d64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2160      	movs	r1, #96	; 0x60
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f905 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e01c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 f89e 	bl	8002d08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f8f5 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f000 f8ec 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002bea:	e003      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <TIM_Base_SetConfig+0xa8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d007      	beq.n	8002c80 <TIM_Base_SetConfig+0x28>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0x28>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <TIM_Base_SetConfig+0xac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <TIM_Base_SetConfig+0xa8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x52>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x52>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <TIM_Base_SetConfig+0xac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <TIM_Base_SetConfig+0xa8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d103      	bne.n	8002cf0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400

08002d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 030a 	bic.w	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e041      	b.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	4d0c      	ldr	r5, [pc, #48]	; (8002f40 <__libc_init_array+0x38>)
 8002f0e:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f10:	1b64      	subs	r4, r4, r5
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	42a6      	cmp	r6, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	f000 f822 	bl	8002f60 <_init>
 8002f1c:	2600      	movs	r6, #0
 8002f1e:	4d0a      	ldr	r5, [pc, #40]	; (8002f48 <__libc_init_array+0x40>)
 8002f20:	4c0a      	ldr	r4, [pc, #40]	; (8002f4c <__libc_init_array+0x44>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	42a6      	cmp	r6, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f30:	4798      	blx	r3
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3a:	4798      	blx	r3
 8002f3c:	3601      	adds	r6, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	08002f9c 	.word	0x08002f9c
 8002f44:	08002f9c 	.word	0x08002f9c
 8002f48:	08002f9c 	.word	0x08002f9c
 8002f4c:	08002fa0 	.word	0x08002fa0

08002f50 <memset>:
 8002f50:	4603      	mov	r3, r0
 8002f52:	4402      	add	r2, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <_init>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr

08002f6c <_fini>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr
